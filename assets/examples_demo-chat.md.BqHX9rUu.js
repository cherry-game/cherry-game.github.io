import{_ as o,c as a,a0 as l,o as t}from"./chunks/framework.BOr1CWtK.js";const m=JSON.parse('{"title":"单节点聊天室","description":"","frontmatter":{},"headers":[],"relativePath":"examples/demo-chat.md","filePath":"examples/demo-chat.md"}'),d={name:"examples/demo-chat.md"};function c(r,e,i,h,s,n){return t(),a("div",null,e[0]||(e[0]=[l('<h1 id="单节点聊天室" tabindex="-1">单节点聊天室 <a class="header-anchor" href="#单节点聊天室" aria-label="Permalink to &quot;单节点聊天室&quot;">​</a></h1><ul><li>使用cherry引擎构建一个简单的多人聊天室程序</li><li>本示例为h5客户端，使用<code>pomelo-ws-client</code>做为客户端sdk，连接类型为<code>websocket</code>，序列化类型为<code>json</code></li></ul><blockquote><p>examples示例已从cherry库迁出，新仓库地址: <a href="https://github.com/cherry-game/examples" target="_blank" rel="noreferrer">https://github.com/cherry-game/examples</a></p></blockquote><h2 id="要求" tabindex="-1">要求 <a class="header-anchor" href="#要求" aria-label="Permalink to &quot;要求&quot;">​</a></h2><ul><li>GO版本 &gt;= 1.18</li></ul><h2 id="操作步骤" tabindex="-1">操作步骤 <a class="header-anchor" href="#操作步骤" aria-label="Permalink to &quot;操作步骤&quot;">​</a></h2><h3 id="克隆" tabindex="-1">克隆 <a class="header-anchor" href="#克隆" aria-label="Permalink to &quot;克隆&quot;">​</a></h3><ul><li>git clone <a href="https://github.com/cherry-game/examples.git" target="_blank" rel="noreferrer">https://github.com/cherry-game/examples.git</a></li><li>或通过github下载源码的方式。点击<code>code</code>按钮<code>Download zip</code>文件</li></ul><h3 id="用-goland-开发调试-推荐" tabindex="-1">用 GoLand 开发调试 - 推荐 <a class="header-anchor" href="#用-goland-开发调试-推荐" aria-label="Permalink to &quot;用 GoLand 开发调试 - 推荐&quot;">​</a></h3><ul><li>找到<code>room/main.go</code>文件，点击<code>debug</code></li></ul><h3 id="用-visual-studio-code-开发调试" tabindex="-1">用 Visual Studio Code 开发调试 <a class="header-anchor" href="#用-visual-studio-code-开发调试" aria-label="Permalink to &quot;用 Visual Studio Code 开发调试&quot;">​</a></h3><ul><li>在VSCode的左侧栏找到<code>运行和调试(Debug)</code>按钮,选择<code>demo-chat</code>，点击<code>绿色小三角</code></li></ul><h3 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h3><ul><li>在<code>终端(terminal)</code>面板中看到 <code>Websocket connector listening at Address :34590</code> 代表启动成功</li><li>在浏览器打开两个页面(<code>http://127.0.0.1:8081</code>)，在文本框中输入聊天内容并点击<code>send</code>按钮，两个页面将会收到聊天内容的广播</li></ul><h3 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h3><ul><li>涉及的环境配置文件在 <code>/config/demo-chat.json</code></li></ul><h3 id="关于actor-model的使用" tabindex="-1">关于actor model的使用 <a class="header-anchor" href="#关于actor-model的使用" aria-label="Permalink to &quot;关于actor model的使用&quot;">​</a></h3><ul><li>从<code>room/main.go</code>文件可得知，节点启动时通过<code>pomelo.NewActor(&quot;user&quot;)</code>创建了一个<code>user actor</code>. 该<code>actor</code>用于管理客户端连接.</li><li>通过<code>app.AddActors(...)</code>可得知，注册了<code>room</code>actor，用于房间管理</li><li>如果需要创建多个聊天房间，可以通过room的子actor实现</li></ul>',18)]))}const b=o(d,[["render",c]]);export{m as __pageData,b as default};
