import{_ as o,c as e,a0 as r,o as a}from"./chunks/framework.BOr1CWtK.js";const p=JSON.parse('{"title":"Actor模型","description":"","frontmatter":{},"headers":[],"relativePath":"core/actor-model.md","filePath":"core/actor-model.md"}'),l={name:"core/actor-model.md"};function c(i,t,n,s,d,m){return a(),e("div",null,t[0]||(t[0]=[r('<h1 id="actor模型" tabindex="-1">Actor模型 <a class="header-anchor" href="#actor模型" aria-label="Permalink to &quot;Actor模型&quot;">​</a></h1><ul><li>每个Actor独立运行在一个goroutine中，所有的逻辑都是串行处理</li><li>Actor接收三种消息：本地消息(Local)、远程消息(Remote)、事件消息(Event) <ul><li>三种消息都有自己的队列(Queue)，每个队列依据FIFO原则进行消费</li><li>本地消息(Local)，用于接收游戏客户端发送过来的本地消息</li><li>远程消息(Remote)，用于Actor之间调用的远程消息</li><li>事件消息(Event)，通过订阅/发布进行的事件消息</li></ul></li><li>Actor可以创建多个子Actor(ChildActor)，子Actor的消息由父Actor进行路由转发</li><li>通过cluster集群组件、discovery发现服务组件，进行跨节点的actor通信</li></ul>',2)]))}const A=o(l,[["render",c]]);export{p as __pageData,A as default};
